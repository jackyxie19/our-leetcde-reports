serial/serial old
算法:复制/标记整理
特点:
1 单线程回收
优势:
1 内存占用最少
2 单核处理器效率高
使用场景:
1 用户桌面应用
2 微服务应用
3 运行在客户端模式下的虚拟机
4 serial old可以作为CMS收集器发生失败时的后备解决方案

ParNew
算法:复制
特点:
1 多线程并行回收
优势:
1 可以与CMS配合

Parallel/Parallel Old
算法:复制/标记整理
特点:
1 多线程并行回收
2 目标是达到一个可控制的吞吐量
2 支持自适应的调节策略
使用场景:
关注吞吐量或者处理器资源较为稀缺的场合

CMS
算法:标记清除
特点：
1 以获取最短停顿时间为目标
2 基本上可以进行完全与用户线程并发的垃圾收集
3 使用卡表信息处理跨带引用问题，使用写后屏障更新维护卡表信息
运行过程步骤:
1 初始标记：需要停顿用户线程，仅仅只是标记一下GC Roots能直接关联到的对象
2 并发标记：垃圾收集线程与用户线程并发执行，使用增量更新解决并发时因用户线程修改引用关系而新生成的存活对象被错误标记为可回收的问题
3 重新标记：修正并发标记阶段因用户线程修改引用关系而导致标记产生变动的那一部分对象的标记记录，停顿时间比G1的最终标记阶段花费的时间更长
4 并发清除
缺点：
1 对处理器资源非常敏感，并发阶段会导致用户线程变慢，吞吐量降低
2 无法处理浮动垃圾，需要预留一部分空间供并发时程序使用，可能导致“并发失败”，进而导致一次完全停顿用户线程的Full GC
3 会产生空间碎片，从而提前触发一次Full GC，可以在这次Full GC时开启内存碎片的合并整理，会导致用户线程停顿较长时间
使用场景：
1 互联网网站
2 B/S系统的服务端

G1
算法:整体上是标记整理,局部上是复制
特点:
1 全功能垃圾收集器,可以回收堆的新生代、老年代和方法区
2 分Region的内存布局，Region大小相等，每个Region可以根据需要扮演Eden空间、Survivor空间、老年代空间，
可以对扮演不同角色的Region采用不同的策略去处理。用Humongous Region存储大对象和超大对象，其被作为老年代的一部分看待。
3 建立了停顿预测（时间）模型,可以指定最大停顿时间，通过衰减均值理论基于每个Region的回收耗时、脏卡数量等信息预测其回收价值
4 按收益动态确定回收集,而不管它属于哪个分代,可以混合收集
5 采用双向卡表解决跨Region引用问题，非常占用内存，使用写后屏障维护双向卡表。
6 为每个Region设置两个TAMS指针，把Region中的一部分空间划分出来用于并发回收过程中的新对象分配，G1收集器默认这个区域上的对象
是存活的。如果内存回收的速度赶不上分配的速度，就会停止用户线程，触发一次Full GC。
7 使用写前屏障来跟踪并发时的指针变化情况，以实现原始快照算法。由于G1写屏障的复杂操作要比CMS消耗更多的运算资源，所以CMS的写屏障
实现是直接的同步操作，而G1则将其实现为类似消息队列的结构，把写屏障中要做的事都放到队列中，然后再异步处理。
运行过程步骤：
1 初始标记：需要停顿用户线程，标记GC Roots能直接关联到的对象，修改TAMS指针，供下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。
2 并发标记：垃圾收集线程与用户线程并发执行，使用原始快照（SATB）解决并发时因用户线程修改引用关系而新生成的存活对象被错误标记为可回收的问题
3 最终标记：处理并发标记阶段结束后遗留下来的少量SATB记录。需要停顿用户线程，比CMS重新标记阶段耗时短。
4 筛选回收：更新Region的统计数据，根据用户期望停顿时间和Region的回收价值、成本，选择任意多个Region构成回收集。然后把决定要回收的Region
中的存活对象复制到空的Region中，再清理掉整个旧的Region，需要停顿用户线程，由多个垃圾收集线程并行完成。
与CMS进行比较：
优势：
1 可以指定停顿时间，使得G1可以在不同应用场景中取得关注吞吐量和关注延迟之间的最佳平衡。
2 运作期间不会产生内存空间碎片，有利于程序长时间运行。
3 使用原始快照解决并发时因用户线程修改引用关系而新生成的存活对象被错误标记为可回收的问题，最终标记阶段停顿时间比CMS短。
劣势：
1 内存占用比CMS高
2 程序执行时的额外执行负载比CMS高，CMS只使用写后屏障来更新维护卡表，而G1要使用写前屏障来跟踪并发时的引用关系变化情况，而且
G1的卡表维护也比CMS的卡表维护更复杂，开销更大。
比较总结：在小内存应用上CMS表现更好，在大内存上G1更有优势，内存临界值在6-8GB之间。
应用场景:
1 服务端应用

Shenandoah
算法：整体上是标记整理,局部上是复制
特点：
1 低延迟，目标是实现垃圾收集的停顿在十毫秒范围之内。
2 使用连接矩阵替换G1中的双向卡表，降低了维护成本和伪共享问题的发生概率。
3 使用转发指针（Brooks Pointer）实现了并发的整理算法,替换了原来以在内存上设置保护陷阱的方式实现并发整理算法的方案。转发指针需要使用
读写屏障来覆盖所有的对象访问操作，可以优化为使用引用访问屏障替换读写屏障。转发指针使用CAS操作实现了多线程并发写入时的同步操作,
解决了对象修改发生在旧对象上的问题。
4 没有实现分代
运行过程步骤：
1 初始标记：需要停顿用户线程，标记GC Roots能直接关联到的对象。
2 并发标记：垃圾收集线程与用户线程并发执行，使用原始快照（SATB）解决并发时因用户线程修改引用关系而新生成的存活对象被错误标记为可回收的问题
3 最终标记：需要短暂停顿用户线程，处理并发标记阶段结束后遗留下来的少量SATB记录，并计算出回收价值最高的Region，将这些Region构成一组回收集。
4 并发清理：清理那些整个区域内连一个存活对象都没有的Region（Immediate Garbage Region）。
5 并发回收：把回收集里面的存活对象复制一份到其他未被使用的Region之中，通过读屏障和转发指针（Brooks Pointer）
解决复制对象时用户线程并发更新、访问对象的问题。
6 初始引用更新：需要短暂停顿用户线程，等待并发回收阶段并行执行复制对象任务的多个垃圾收集线程全部完成它们的工作。
7 并发引用更新：按照内存物理地址的顺序，线性地搜索出引用类型，把旧值替换为新值。
8 最终引用更新：需要停顿用户线程，更新GC Roots中的引用。
9 并发清理：清理掉经过对象复制和引用更新后，整个区域中已再无存活对象的Region（Immediate Garbage Region）。

ZGC
算法：标记整理
特点:
1 低延迟，目标是实现垃圾收集的停顿在十毫秒范围之内。
2 没有实现分代,进行Full GC而不进行Partial GC,不需要处理跨Region引用问题，也就不需要通过写后屏障维护记忆集。
3 使用读屏障、染色指针和内存多重映射等技术实现了可并发的标记整理算法。在读屏障中根据转发表将访问发送到新复制的对象上，并进行指针自愈。
将标记存放在引用对象的指针上，无需通过写前屏障来维护标记信息。
4 Region具有动态性，可以动态创建和销毁,拥有动态的区域容量大小。有2MB的小型Region,用于存放小于256KB的小对象;
32MB的中型Region,用于存放大于等于256KB小于4MB的对象;还有容量可以以2MB的整数倍动态变化的大型Region,用于存放大于等于4MB的大对象,
每个大型Region只存放一个大对象，不会被进行重分配。
5 可以通过染色指针可以知道对象是否被复制过，然后通过转发表将访问发送到新复制的对象上，并进行指针自愈。所以一旦某个Region中
的所有对象都被复制后，这个Region立即就能够被释放和重用掉。而且引用更新也变得不再迫切，合并到了下一次收集时的并发标记阶段。
6 染色指针方便扩展，以便今后进一步提升性能。
运行过程步骤：
1 并发标记：初始标记、最终标记阶段会停顿用户线程，直接在染色指针上的Mark0、Mark1上进行标记。
2 并发预备重分配：针对全堆，通过特定的查询统计条件得出本次收集过程要清理哪些Region，将这些Region组成重分配集。



